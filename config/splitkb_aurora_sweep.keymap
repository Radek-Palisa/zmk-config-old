/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define SYM  1
#define NAV  2

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&sl {
    release-after-ms = <2000>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <MOD_LCTL>;
        };
        to_sl: behavior_to_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "to_sl";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&to>, <&sl>;
        };
        kh_to: behavior_kh_to {
            compatible = "zmk,behavior-hold-tap";
            label = "kh_to";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&to>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
    };

    // Comment out -> Cmd + / 
    // Figma hide UI -> Cmd + \
    // Back navigation -> Cmd + [
    // browse tab nav -> Ctrl + tab
    // Terminate terminal process -> Ctrl + C


    keymap {
        compatible = "zmk,keymap";

       	default_layer {
            bindings = <
            &kp Q  &kp W  &kp E   &kp R    &kp T 			        &kp Y        &kp U    &kp I    &mt RGUI(SLASH) O &kp P 
            &kp A  &kp S  &kp D   &kp F    &kp G 			        &kp H        &kp J    &kp K    &kp L             &mt RA(BACKSPACE) BACKSPACE
            &kp Z  &kp X  &kp C   &kp V    &kp B			        &kp N        &kp M    &kp CMMA &kp DOT           &kp ENTER
                                  &kp RGUI   &sk LSHIFT   		    &mt RGUI SPC &sl SYM
            >;
		};

       	symbol_layer {
            bindings = <
		    &kp EXCL  &kp AT    &kp HASH  &kp DLLR          &kp PRCNT		        &kp CARET &kp AMPS &kp ASTRK &kp QMARK &kp SEMI
		    &kp ESC   &kp EQUAL &kp EXCL  &kp SQT           &kp MINUS 		        &kp LBKT  &kp LBRC &kp RBRC  &kp RBKT  &kp COLON
            &kp TILDE &kp GRAVE &kp EXCL  &kp DQT           &mt UNDER PLUS	        &kp PIPE  &kp LPRN &kp RPRN  &kp BSLH  &kp SLASH 
					                      &kh_to LCTRL BASE &to NAV      	        &kp RGUI  &kp RALT
            >;
		};
		
        navigation_layer {
            bindings = <
            &kp N1  &kp N2     &kp N3           &mt LC(LG(LS(N4))) N4 &mt LG(LS(N5)) N5       &mt LG(MINUS) N6 &mt LG(PLUS) N7 &kp N8    &kp N9    &kp N0
            &kp ESC &kp K_MUTE &kp K_VOL_DN     &kp K_VOL_UP          &kp TAB                 &kp LEFT         &kp DOWN        &kp UP    &kp RIGHT &kp BSPC
            &to 3   &kp C_PP   &mt LG(C) C_PREV &mt LG(V) C_NEXT      &kp LS(TAB)             &kp HOME         &kp PG_DN       &kp PG_UP &kp END   &trans 
                                                &kh_to LCTRL BASE     &kp LSHIFT 	          &kp RGUI         &kp RALT
            >;
		};

		control_layer {
            bindings = <
            &out OUT_USB &out OUT_BLE &out OUT_TOG &none    &kp Y          &none   &none   &none   &none   &none  
            &none        &none        &none        &none    &none          &none   &none   &none   &none   &none  
            &bt BT_PRV   &bt BT_NXT   &bt BT_CLR   &none    &none          &none   &none   &none   &none   &none    
                                                   &to BASE &none   	   &none   &none
            >;
		};
	};
};
