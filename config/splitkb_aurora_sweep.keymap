/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	    td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_tab {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp ESC>;
        };

        combo_bksp {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp BKSP>;
        };

        combo_enter {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp ENTER>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RGUI>;
        };    

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
       	default_layer {
            bindings = <
            &kp Q  &kp W  &kp E  &kp R     &kp T 			    &kp Y    &kp U  &kp I    &kp O   &kp P 
            &kp A  &kp S  &kp D  &kp F     &kp G 			    &kp H    &kp J  &kp K    &kp L   &kp COLON
            &kp Z  &kp X  &kp C  &kp V     &kp B			    &kp N    &kp M  &kp CMMA &kp DOT &kp SLASH
                                 &kp LCTRL &sk LSHIFT   		&mt RGUI SPC &to 1
            >;
		};

       	left_layer {
            bindings = <
		    &kp TAB   &kp AT    &kp HASH  &td LC(LG(LS(N4))) DLLR &td LG(LS(N5)) PRCNT		   &kp CARET &kp AMPS &kp ASTRK &kp SEMI &kp ENTER
		    &kp ESC   &kp EQUAL &kp QMARK &kp EXCL                &kp MINUS 		           &kp BSLH  &kp LBRC &kp RBRC  &kp PIPE &kp BKSP
            &kp TILDE &kp GRAVE &kp DQT   &kp SQT                 &kp UNDER 	               &kp LBKT  &kp LPRN &kp RPRN  &kp RBKT &to 3 
					                      &to 0                   &mo 3      	               &kp RGUI  &to 2 
            >;
		};
		
		right_layer {
            bindings = <
            &kp TAB &kp C_PP   &kp C_PREV   &kp C_NEXT   &kp EQUAL       	&none    &kp N7 &kp N8 &kp N9 &kp ENTER
            &kp ESC &kp K_MUTE &kp K_VOL_DN &kp K_VOL_UP &kp MINUS          &kp PLUS &kp N4 &kp N5 &kp N6 &kp BKSP
            &to 4   &none      &kp LT       &kp GT       &kp DOT        	&kp N0   &kp N1 &kp N2 &kp N3 &to 3 
                                            &to 0        &trans 	        &kp RGUI &to 2 
            >;
		};	

		tri_layer {
            bindings = <
            &kp ESC   &kp LG(W) &none     &kp LG(R) &kp LG(T)	      &none    &kp LG(LBKT) &kp LG(RBKT) &none     &kp ENTER
            &kp LG(A) &kp LG(S) &none     &none     &kp LG(L)  		  &kp LEFT &kp DOWN     &kp UP       &kp RIGHT &kp BKSP 
            &kp LG(Z) &kp LG(X) &kp LG(C) &kp LG(V) &kp DEL    		  &none    &kp PG_DN    &kp PG_UP    &none     &none    
                                          &to 0     &trans  		  &kp RGUI &to 1 
            >;
		};	

        bt {
            bindings = <
            &none       &none      &none      &none   &none          &none   &none   &none   &none   &none  
            &none       &none      &none      &none   &none          &none   &none   &none   &none   &none  
            &bt BT_PRV  &bt BT_NXT &bt BT_CLR &none   &none    		 &none   &none   &none   &none   &none    
                                              &to 0   &none   		 &none   &to 1 
            >;
        };
	};
};
