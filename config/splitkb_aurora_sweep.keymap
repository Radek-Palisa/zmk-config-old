/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&sl {
    release-after-ms = <2000>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
       	default_layer {
            bindings = <
            &kp Q  &kp W  &kp E  &kp R     &kp T 			    &kp Y        &kp U  &kp I    &kp O   &kp P 
            &kp A  &kp S  &kp D  &kp F     &kp G 			    &kp H        &kp J  &kp K    &kp L   &kp BKSP
            &kp Z  &kp X  &kp C  &kp V     &kp B			    &kp N        &kp M  &kp CMMA &kp DOT &kp ENTER
                                 &kp LCTRL &sk LSHIFT   		&mt RGUI SPC &sl 1
            >;
		};

       	left_layer {
            bindings = <
		    &kp TAB   &kp AT    &kp HASH  &kp DLLR &kp PRCNT		        &kp CARET &kp AMPS &kp ASTRK &kp QMARK &kp SEMI
		    &kp ESC   &kp EQUAL &kp QMARK &kp EXCL &kp MINUS 		        &kp LBKT  &kp LBRC &kp RBRC  &kp RBKT  &kp COLON
            &kp TILDE &kp GRAVE &kp DQT   &kp SQT  &mt UNDER PLUS	        &kp PIPE  &kp LPRN &kp RPRN  &kp BSLH  &kp SLASH 
					                      &to 0    &to 2      	            &kp RGUI  &to 2
            >;
		};
		
        right_layer {
            bindings = <
            &kp N1  &kp N2     &kp N3       &mt LC(LG(LS(N4))) N4 &mt LG(LS(N5)) N5       &kp N6   &kp N7    &kp N8    &kp N9    &kp N0
            &kp ESC &kp K_MUTE &kp K_VOL_DN &kp K_VOL_UP          &kp TAB                 &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &trans
            &to 3   &kp C_PP   &kp C_PREV   &kp C_NEXT            &kp LS(TAB)             &kp HOME &kp PG_DN &kp PG_UP &kp END   &trans 
                                            &to 0                 &trans 	              &kp RGUI &sl 1
            >;
		};

		tri_layer {
            bindings = <
            &none       &none      &none      &none  &none            &none   &none   &none   &none   &none  
            &none       &none      &none      &none  &none            &none   &none   &none   &none   &none  
            &bt BT_PRV  &bt BT_NXT &bt BT_CLR &none  &kp DEL          &none   &none   &none   &none   &none    
                                              &to 0  &none  		  &none   &none
            >;
		};
	};
};
